// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/LexerParser1.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class LexerParser1 {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object toSet(Object C) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v1=$newSet();
      $v2:for (Object x:GCollections.unmodifiableCollection(C)) {
        $v1.add(x);
      }
      $result=$v1;
      if (true) break $try;
      $line=22;
      $rethrow(new RuntimeException("The function \"toSet(C:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,"toSet",$line);
    }
    return $result;
  }
  public static Object charsStrings(Object strings) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v3=$newSet(GCollections.emptySet());
      $v4:for (Object s:GCollections.unmodifiableCollection(strings)) {
        $v3.union(GCollections.unmodifiableSet(((java.lang.Iterable)(LexerParser1.toSet(s)))));
      }
      $result=$v3;
      if (true) break $try;
      $line=23;
      $rethrow(new RuntimeException("The function \"charsStrings(strings:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,"charsStrings",$line);
    }
    return $result;
  }
  public static Object get1(java.lang.Iterable $v5) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v6=GCollections.unmodifiableCollection($v5).iterator();
      Object r=$v6.next();
      Object i=$v6.next();
      $result=r;
      if (true) break $try;
      $line=27;
      $rethrow(new RuntimeException("The function \"get1(\u27E8r,i\u27E9:java.lang.Iterable)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,"get1",$line);
    }
    return $result;
  }
  public static Object get2(java.lang.Iterable $v7) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v8=GCollections.unmodifiableCollection($v7).iterator();
      Object r=$v8.next();
      Object i=$v8.next();
      $result=i;
      if (true) break $try;
      $line=28;
      $rethrow(new RuntimeException("The function \"get2(\u27E8r,i\u27E9:java.lang.Iterable)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,"get2",$line);
    }
    return $result;
  }
  public static GDeterministicTransducer lexer=null;
  static {
    int $line=0;
    $line=30;
    $try:try {
      lexer=$defaultValue(GDeterministicTransducer.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,null,$line);
    }
  }
  public static GPushdownAutomaton parser=null;
  static {
    int $line=0;
    $line=31;
    $try:try {
      parser=$defaultValue(GPushdownAutomaton.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,null,$line);
    }
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=37;
      lexer=$cast(GDeterministicTransducer.class,$fix(LexerMiniScheme.createLexer()));
      $line=39;
      Object parser2=$fix(LexerParser1.createAutomaton2(((gold.structures.automaton.GDeterministicTransducer)lexer).getOutputAlphabet()));
      $line=40;
      parser=$cast(GPushdownAutomaton.class,$fix(LexerParser1.createAutomaton(((gold.structures.automaton.GDeterministicTransducer)lexer).getOutputAlphabet())));
      $line=41;
      Object stdin=$fix($invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)}));
      $line=42;
      System.out.println($message(new Object[]{"Do you want to use the parser that implements the grammar directly (1 for YES)"}));
      $line=43;
      String mode=null;
      mode=$defaultValue(String.class);
      $line=44;
      mode=$cast(String.class,$fix(((java.util.Scanner)stdin).nextLine()));
      $line=50;
      if ($opEqualY(((java.lang.String)mode).charAt($int(0)),'1')) {
        $line=52;
        GAutomataFrame.show($cast(gold.structures.automaton.IAutomaton.class,parser));
        $line=53;
        LexerParser1.testLexerParser1($cast(gold.structures.automaton.ITransducer.class,lexer),$cast(gold.structures.automaton.IPushdownAutomaton.class,parser));
      }
      else {
        $line=57;
        GAutomataFrame.show($cast(gold.structures.automaton.IAutomaton.class,parser2));
        $line=59;
        LexerParser1.testLexerParser1($cast(gold.structures.automaton.ITransducer.class,lexer),$cast(gold.structures.automaton.IPushdownAutomaton.class,parser2));
      }
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,"main",$line);
    }
  }
  public static IPushdownAutomaton createAutomaton(Object Terms) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=81;
      Object NonTerms=$fix(GCollections.asSet('E','L'));
      $line=82;
      Object Q=$fix(GCollections.asSet("I","q","F"));
      $line=84;
      Object SkipChars=$fix(GCollections.asSet(' ','\n'));
      $line=85;
      Object \u03A3=$fix($opUnionY(LexerParser1.toSet(Terms),SkipChars));
      $line=86;
      Object \u0393=$fix($opUnionY($opUnionY(LexerParser1.toSet(Terms),NonTerms),GCollections.asSet('$')));
      $line=87;
      Object q_0=$fix("I");
      $line=88;
      Object F=$fix(GCollections.asSet("F"));
      $line=89;
      Object M=$fix($invokeConstructor(GPushdownAutomaton.class,new Object[]{Q,\u03A3,\u0393,q_0,F}));
      $line=91;
      $invokeMethod("push",((gold.structures.automaton.GPushdownAutomaton)M).delta("I","q",$cast(java.lang.String.class,"")),new Object[]{"$E"});
      $line=92;
      $invokeMethod("pop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","F",$cast(java.lang.String.class,"")),new Object[]{"$"});
      $line=94;
      for (Object $v9:GCollections.unmodifiableCollection(GCollections.asSet('(',')','+','*','/','-','v','n'))) {
        Object x=$v9;
        $line=95;
        $invokeMethod("pop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,$opAdditY("",x))),new Object[]{$opAdditY("",x)});
      }
      $line=97;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E","v"});
      $line=98;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E","n"});
      $line=99;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E",")L/("});
      $line=100;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E",")L-("});
      $line=101;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E",")L+("});
      $line=102;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"E",")L*("});
      $line=103;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"L","E"});
      $line=104;
      $invokeMethod("changeTop",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"")),new Object[]{"L","EL"});
      $line=107;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class," ")),new Object[]{});
      $line=108;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta("q","q",$cast(java.lang.String.class,"\n")),new Object[]{});
      $line=110;
      $result=M;
      if (true) break $try;
      $line=111;
      $rethrow(new RuntimeException("The function \"createAutomaton(Terms:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,"createAutomaton",$line);
    }
    return $cast(IPushdownAutomaton.class,$result);
  }
  public static IPushdownAutomaton createAutomaton2(Object Terms) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=125;
      Object NonTerms=$fix(GCollections.asSet('E','L'));
      $line=126;
      Object Q=$fix(GCollections.asSet("I","F"));
      $line=127;
      Object SkipChars=$fix(GCollections.asSet(' ','\n'));
      $line=128;
      Object \u03A3=$fix($opUnionY(LexerParser1.toSet(Terms),GCollections.asSet(' ','\n')));
      $line=129;
      Object \u0393=$fix(GCollections.asSet('1'));
      $line=130;
      Object q_0=$fix("I");
      $line=131;
      Object F=$fix(GCollections.asSet("F"));
      $line=132;
      Object M=$fix($invokeConstructor(GPushdownAutomaton.class,new Object[]{Q,\u03A3,\u0393,q_0,F}));
      $line=134;
      $invokeMethod("push",((gold.structures.automaton.GPushdownAutomaton)M).delta("I","I",$cast(java.lang.String.class,"(+")),new Object[]{"1"});
      $line=135;
      $invokeMethod("push",((gold.structures.automaton.GPushdownAutomaton)M).delta("I","I",$cast(java.lang.String.class,"(*")),new Object[]{"1"});
      $line=136;
      $invokeMethod("push",((gold.structures.automaton.GPushdownAutomaton)M).delta("I","I",$cast(java.lang.String.class,"(/")),new Object[]{"1"});
      $line=137;
      $invokeMethod("push",((gold.structures.automaton.GPushdownAutomaton)M).delta("I","I",$cast(java.lang.String.class,"(-")),new Object[]{"1"});
      $line=139;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta("I","F",$cast(java.lang.String.class,"v")),new Object[]{});
      $line=140;
      $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta("I","F",$cast(java.lang.String.class,"n")),new Object[]{});
      $line=141;
      $invokeMethod("pop",((gold.structures.automaton.GPushdownAutomaton)M).delta("F","F",$cast(java.lang.String.class,")")),new Object[]{"1"});
      $line=142;
      $invokeMethod("skip",((gold.structures.automaton.GPushdownAutomaton)M).delta("F","I",$cast(java.lang.String.class,"")),new Object[]{"1"});
      $line=146;
      for (Object $v10:GCollections.unmodifiableCollection(Q)) {
        Object q=$v10;
        $line=147;
        for (Object $v11:GCollections.unmodifiableCollection(SkipChars)) {
          Object s=$v11;
          $line=148;
          $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(q,q,$cast(java.lang.String.class,$opAdditY("",s))),new Object[]{});
        }
      }
      $line=152;
      $result=M;
      if (true) break $try;
      $line=153;
      $rethrow(new RuntimeException("The function \"createAutomaton2(Terms:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,"createAutomaton2",$line);
    }
    return $cast(IPushdownAutomaton.class,$result);
  }
  public static Object testLexerParser1(ITransducer M, IPushdownAutomaton P) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=158;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=159;
      String string=null;
      string=$defaultValue(String.class);
      $line=161;
      Object inputA=$fix(LexerParser1.toSet(((gold.structures.automaton.ITransducer)M).getInputAlphabet()));
      $line=162;
      Object inputP=$fix(LexerParser1.toSet(((gold.structures.automaton.IPushdownAutomaton)P).getInputAlphabet()));
      $line=164;
      Object input=$fix("");
      $line=166;
      System.out.println($message(new Object[]{"----------------------------"}));
      $line=167;
      System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
      $line=168;
      System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
      $line=170;
      string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      $line=172;
      while (true) {
        if (!(!$opEqualY(string,"EXIT"))) break;
        $line=173;
        string=$cast(String.class,$fix($opAdditY(string,"  \n ")));
        $line=174;
        input=$fix("");
        $line=175;
        while (true) {
          if (!(!$opEqualY(((java.lang.String)string).charAt($int(0)),'$'))) break;
          $line=176;
          input=$fix($opAdditY(input,string));
          $line=177;
          string=$cast(String.class,$fix($opAdditY(((java.util.Scanner)sc).nextLine()," \n ")));
        }
        $line=179;
        string=$cast(String.class,$fix(input));
        $line=180;
        Object option=$fix("");
        $line=181;
        while (true) {
          if (!(!$opMembrY(option,GCollections.asSet("1","2","3")))) break;
          $line=182;
          System.out.println($message(new Object[]{"What do you want to do?"}));
          $line=183;
          System.out.println($message(new Object[]{"1. Lexer only?"}));
          $line=184;
          System.out.println($message(new Object[]{"2. Lexer and parser?"}));
          $line=185;
          System.out.println($message(new Object[]{"3. Parser?"}));
          $line=186;
          option=$fix(((java.util.Scanner)sc).nextLine());
        }
        $line=188;
        Object stringOut=$fix("");
        $line=189;
        if (($opEqualY(option,"1")||$opEqualY(option,"2"))) {
          $line=190;
          if ($opSbsetY(LexerParser1.toSet(string),inputA)) {
            $line=191;
            Object result=$fix(LexerMiniScheme.runLexer(M,input));
            $line=192;
            Object ok=$fix(LexerParser1.get1($cast(java.lang.Iterable.class,result)));
            $line=193;
            Object images=$fix(LexerParser1.get2($cast(java.lang.Iterable.class,result)));
            $line=194;
            stringOut=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
            $line=195;
            if (!$bool(ok)) {
              $line=196;
              System.out.println($message(new Object[]{$opAdditY("Input was not accepted . Partial token stream: ",stringOut)}));
              $line=197;
              System.out.println($message(new Object[]{$opAdditY("Strings: ",images)}));
            }
            else {
              $line=199;
              System.out.println($message(new Object[]{$opAdditY("Input was accepted. Token stream: ",stringOut)}));
              $line=200;
              System.out.println($message(new Object[]{$opAdditY("Strings: ",images)}));
              $line=201;
              if ($opEqualY(option,"2")) {
                $line=202;
                if ($opSbsetY(LexerParser1.toSet(stringOut),inputP)) {
                  $line=203;
                  result=$fix(((gold.structures.automaton.IPushdownAutomaton)P).acceptsString($cast(java.lang.String.class,stringOut)));
                  $line=204;
                  System.out.println($message(new Object[]{$opAdditY($opAdditY("The parser did ",(($bool(result))?("accept "):("not accept")))," the token stream.")}));
                }
                else {
                  $line=206;
                  System.out.println($message(new Object[]{$opAdditY("Output contains invalid symbols for the Parser: ",$opDiffeY(LexerParser1.toSet(stringOut),inputP))}));
                }
              }
            }
          }
          else {
            $line=211;
            System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(LexerParser1.toSet(string),inputA))}));
          }
        }
        else {
          $line=214;
          if ($opSbsetY(LexerParser1.toSet(string),inputP)) {
            $line=215;
            Object result=$fix(((gold.structures.automaton.IPushdownAutomaton)P).acceptsString($cast(java.lang.String.class,string)));
            $line=216;
            System.out.println($message(new Object[]{$opAdditY($opAdditY("The string was ",(($bool(result))?("accepted"):("not accepted")))," by the parser. ")}));
          }
          else {
            $line=218;
            System.out.println($message(new Object[]{$opAdditY("Input contains invalid symbols: ",$opDiffeY(LexerParser1.toSet(string),inputP))}));
          }
        }
        $line=221;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=223;
        System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
        $line=224;
        System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
        $line=225;
        string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      }
      $line=228;
      System.out.println($message(new Object[]{"Good bye"}));
      $line=229;
      System.out.println($message(new Object[]{""}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParser1.class,"testLexerParser1",$line);
    }
    return $result;
  }
}
