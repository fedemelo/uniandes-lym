// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/ParserRobot202220.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class ParserRobot202220 {
  public static Object toSet(Object C) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v1=$newSet();
      $v2:for (Object x:GCollections.unmodifiableCollection(C)) {
        $v1.add(x);
      }
      $result=$v1;
      if (true) break $try;
      $line=11;
      $rethrow(new RuntimeException("The function \"toSet(C:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ParserRobot202220.class,"toSet",$line);
    }
    return $result;
  }
  public static IPushdownAutomaton createParser(Object A) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=16;
      Character PROG=null;
      PROG=$defaultValue(Character.class);
      $line=17;
      Character GORP=null;
      GORP=$defaultValue(Character.class);
      $line=18;
      Character VAR=null;
      VAR=$defaultValue(Character.class);
      $line=19;
      Character PROC=null;
      PROC=$defaultValue(Character.class);
      $line=20;
      Character CORP=null;
      CORP=$defaultValue(Character.class);
      $line=21;
      Character if_=null;
      if_=$defaultValue(Character.class);
      $line=22;
      Character else_=null;
      else_=$defaultValue(Character.class);
      $line=23;
      Character fi=null;
      fi=$defaultValue(Character.class);
      $line=24;
      Character while_=null;
      while_=$defaultValue(Character.class);
      $line=25;
      Character do_=null;
      do_=$defaultValue(Character.class);
      $line=26;
      Character od=null;
      od=$defaultValue(Character.class);
      $line=27;
      Character repeatTimes=null;
      repeatTimes=$defaultValue(Character.class);
      $line=28;
      Character per=null;
      per=$defaultValue(Character.class);
      $line=29;
      Character isfacing=null;
      isfacing=$defaultValue(Character.class);
      $line=30;
      Character isValid=null;
      isValid=$defaultValue(Character.class);
      $line=31;
      Character canWalk=null;
      canWalk=$defaultValue(Character.class);
      $line=32;
      Character not_=null;
      not_=$defaultValue(Character.class);
      $line=33;
      Character walk=null;
      walk=$defaultValue(Character.class);
      $line=34;
      Character jump=null;
      jump=$defaultValue(Character.class);
      $line=35;
      Character jumpTo=null;
      jumpTo=$defaultValue(Character.class);
      $line=36;
      Character veer=null;
      veer=$defaultValue(Character.class);
      $line=37;
      Character look=null;
      look=$defaultValue(Character.class);
      $line=38;
      Character drop=null;
      drop=$defaultValue(Character.class);
      $line=39;
      Character grab=null;
      grab=$defaultValue(Character.class);
      $line=40;
      Character get=null;
      get=$defaultValue(Character.class);
      $line=41;
      Character free=null;
      free=$defaultValue(Character.class);
      $line=42;
      Character pop=null;
      pop=$defaultValue(Character.class);
      $line=43;
      Character pick=null;
      pick=$defaultValue(Character.class);
      $line=44;
      Character left=null;
      left=$defaultValue(Character.class);
      $line=45;
      Character right=null;
      right=$defaultValue(Character.class);
      $line=46;
      Character around=null;
      around=$defaultValue(Character.class);
      $line=47;
      Character north=null;
      north=$defaultValue(Character.class);
      $line=48;
      Character south=null;
      south=$defaultValue(Character.class);
      $line=49;
      Character east=null;
      east=$defaultValue(Character.class);
      $line=50;
      Character west=null;
      west=$defaultValue(Character.class);
      $line=51;
      Character front=null;
      front=$defaultValue(Character.class);
      $line=52;
      Character back=null;
      back=$defaultValue(Character.class);
      $line=53;
      Character num=null;
      num=$defaultValue(Character.class);
      $line=54;
      Character v=null;
      v=$defaultValue(Character.class);
      $line=55;
      Character V=null;
      V=$defaultValue(Character.class);
      $line=57;
      PROG=$cast(Character.class,$fix('D'));
      $line=58;
      GORP=$cast(Character.class,$fix('G'));
      $line=59;
      VAR=$cast(Character.class,$fix('A'));
      $line=60;
      PROC=$cast(Character.class,$fix('P'));
      $line=61;
      CORP=$cast(Character.class,$fix('C'));
      $line=62;
      if_=$cast(Character.class,$fix('i'));
      $line=63;
      else_=$cast(Character.class,$fix('s'));
      $line=64;
      fi=$cast(Character.class,$fix('f'));
      $line=65;
      while_=$cast(Character.class,$fix('w'));
      $line=66;
      do_=$cast(Character.class,$fix('x'));
      $line=67;
      od=$cast(Character.class,$fix('y'));
      $line=68;
      repeatTimes=$cast(Character.class,$fix('r'));
      $line=69;
      per=$cast(Character.class,$fix('p'));
      $line=70;
      isfacing=$cast(Character.class,$fix('b'));
      $line=71;
      isValid=$cast(Character.class,$fix('h'));
      $line=72;
      canWalk=$cast(Character.class,$fix('c'));
      $line=73;
      not_=$cast(Character.class,$fix('n'));
      $line=74;
      walk=$cast(Character.class,$fix('k'));
      $line=75;
      jump=$cast(Character.class,$fix('j'));
      $line=76;
      jumpTo=$cast(Character.class,$fix('t'));
      $line=77;
      veer=$cast(Character.class,$fix('q'));
      $line=78;
      look=$cast(Character.class,$fix('l'));
      $line=79;
      drop=$cast(Character.class,$fix('d'));
      $line=80;
      grab=$cast(Character.class,$fix('a'));
      $line=81;
      get=$cast(Character.class,$fix('g'));
      $line=82;
      free=$cast(Character.class,$fix('e'));
      $line=83;
      pop=$cast(Character.class,$fix('o'));
      $line=84;
      pick=$cast(Character.class,$fix('m'));
      $line=85;
      left=$cast(Character.class,$fix('L'));
      $line=86;
      right=$cast(Character.class,$fix('R'));
      $line=87;
      around=$cast(Character.class,$fix('O'));
      $line=88;
      north=$cast(Character.class,$fix('N'));
      $line=89;
      south=$cast(Character.class,$fix('S'));
      $line=90;
      east=$cast(Character.class,$fix('E'));
      $line=91;
      west=$cast(Character.class,$fix('W'));
      $line=92;
      front=$cast(Character.class,$fix('F'));
      $line=93;
      back=$cast(Character.class,$fix('B'));
      $line=94;
      num=$cast(Character.class,$fix('#'));
      $line=95;
      v=$cast(Character.class,$fix('v'));
      $line=96;
      V=$cast(Character.class,$fix('V'));
      $line=99;
      Character par=null;
      par=$defaultValue(Character.class);
      $line=100;
      par=$cast(Character.class,$fix(')'));
      $line=101;
      Character key=null;
      key=$defaultValue(Character.class);
      $line=102;
      key=$cast(Character.class,$fix('{'));
      $line=106;
      Object Q=$fix(GCollections.asSet("qPROG","q,","qCORP","q2","q1","q;","qPROC","qPROC(","qPROC)","qPROC,","qPROCinstrs","qPROCp","qPROCv","qVAR","qv","qCORP","qBlock","qBlockEnd"));
      $line=123;
      Object \u03A3=$fix($opUnionY(ParserRobot202220.toSet(A),GCollections.asSet(' ','\n')));
      $line=125;
      Object \u0393=$fix(GCollections.asSet(PROG,PROC,CORP,VAR,par,v,key));
      $line=127;
      Object q_0=$fix("qPROG");
      $line=129;
      Object F=$fix(GCollections.asSet("qPROG"));
      $line=131;
      Object M=$fix($invokeConstructor(GPushdownAutomaton.class,new Object[]{Q,\u03A3,\u0393,q_0,F}));
      $line=133;
      Object SkipChars=$fix(GCollections.asSet(' ','\n','\t'));
      $line=141;
      for (Object $v3:GCollections.unmodifiableCollection(Q)) {
        Object q=$v3;
        $line=142;
        for (Object $v4:GCollections.unmodifiableCollection(SkipChars)) {
          Object s=$v4;
          $line=143;
          $invokeMethod("ignore",((gold.structures.automaton.GPushdownAutomaton)M).delta(q,q,$cast(java.lang.String.class,$opAdditY("",s))),new Object[]{});
        }
      }
      $line=148;
      $result=M;
      if (true) break $try;
      $line=150;
      $rethrow(new RuntimeException("The function \"createParser(A:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ParserRobot202220.class,"createParser",$line);
    }
    return $cast(IPushdownAutomaton.class,$result);
  }
}
