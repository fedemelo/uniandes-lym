/* Project 3
 * 
 * Parser
 * 
 * Federico Melo Barrero
 * 
 */

using gold.**

toSet(C) :=  {x|  x in C}

function createParser(A):IPushdownAutomaton begin
	
	// Declare each token as a variable (I'm not memorizing 40 tokens‥.)
	
	
	// Extra variables
	var par: char
	par = ')'
	var key: char
	key = '{'
	
	
	// States
	Q := {"qPROG","q,", "qCORP", "q2",
		 "q1",
		 "q;",
		 "qPROC",
		 "qPROC(",
		 "qPROC)",
		 "qPROC,",
		 "qPROCinstrs",
		 "qPROCp",
		 "qPROCv",
		 "qVAR",
		 "qv",
		 "qCORP",
		 "qBlock",
		 "qBlockEnd"}
	
	// Tokens (Automaton's alphabet)
	Σ := toSet(A) ∪ {' ', '\n', '\t'}
	// Stack's alphabet
	Γ := {PROG, PROC, CORP, VAR, par, v, key}
	// Initial state
	q₀ := "qPROG"
	// Final state
	F := {"qPROG"}
	
	M := GPushdownAutomaton(Q, Σ, Γ, q₀, F)

	SkipChars := {' ', '\n', '\t'}   // this will only  be used when testing only the parser, as the lexer removes SkipChars

	
	// AUTOMATON

	// A program defintion begins with the keyword PROG 
	M.delta("qPROG", "q1", PROG).push(PROG)
	// It ends the keyword GORP
	M.delta("qBlockEnd", "qPROG", GORP).pop(PROG)
	
	// A declaration of variables is the keyword VAR . 
	M.delta("q1", "qVAR", VAR).push(VAR)
	// followed by a list of names separated  by commas
	M.delta("qVAR", "qv", v).ignore()
	M.delta("qv", "q,", ',').push(v)
	M.delta("q,", "qVAR", v).pop(v)
	// The list is followed by ;
	M.delta("qVAR", "q2", ';').pop(VAR)  // Valid empty variable declaration: VAR ;
	M.delta("qv", "q2", ';').pop(VAR)
	
	// A procedure defintion is a the word PROC
	M.delta("q1", "qPROC", PROC).push(PROC)
	M.delta("q2", "qPROC", PROC).push(PROC)
	// followed by a name
	M.delta("qPROC", "qPROCv", v).changeTop(PROC, CORP)
	// followed by a list of parameters within parenthesis separated by commas
	M.delta("qPROCv", "qPROC(", '(').push(par)
	M.delta("qPROC(", "qPROCp", v).ignore()
	M.delta("qPROC(", "qPROC)", ')').pop(par)  // Procedure with no parameters: PROC hello( ) {‥.} CORP
	M.delta("qPROCp", "qPROC)", ')').pop(par)
	M.delta("qPROCp", "qPROC,", ',').push(v)
	M.delta("qPROC,", "qPROCp", v).pop(v)
	// followed by a block of instructions
	M.delta("qPROC)", "qPROCinstrs", '{').push(key)
	// and ending with the word CORP
	M.delta("qCORP", "q2", CORP).pop(CORP)
	
	
	// Block of instructions inside procedure
	// A block of instructions is a sequence of instructions separated by semicolons within curly brackets
	// TODO
	M.delta("qPROCinstrs", "qCORP", '}').pop(key)  // Empty block of instructions in procedure: PROC hi(‥.) { } CORP


	// Single block of instructions in program, outside procedures
	// A block of instructions is a sequence of instructions separated by semicolons within curly brackets
	M.delta("q1", "qBlock", '{').push(key)
	M.delta("q2", "qBlock", '{').push(key)
	// TODO
	M.delta("qBlock", "qBlockEnd", '}').pop(key) // Empty instruction block : PROG ‥. { } GORP
	
	
	
	 // this will only  be used when testing only the parser as the lexer removes  SkipChars
	 
	 // ????????
	 
	 for each q in Q do
	 	for each s in SkipChars do
	 	   M.delta(q,q,λ+s).ignore()
	 	end
	 end
	
	
	return M

end

