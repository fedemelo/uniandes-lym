/*
Project 1
@authors: Federico Melo Barrero, f.melo, 202021525
		  Germán Alberto Rojas Cetina, g.rojasc, 202013415
*/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: 
{
  	/* Commands */
    	< STEP: "step" >
    |	< JUMP: "jump" >
    |	< JUMPTO: "jumpTo" >
    |	< VEER: "veer" >
    |	< LOOK: "look" >
    |	< DROP: "drop" >
    |	< GRAB: "grab" >
    |	< GET: "get" >
    |	< FREE: "free" >
    | 	< DMOVE:  "Dmove" >
	|	< OMOVE:  "Omove" >
	
	/* Control structures */
	|	< IF: "if" >
	|	< FI: "fi" >
	|	< ELSE: "else" >
	| 	< WHILE: "while" >
	|	< DO: "do" >
	| 	< OD: "od" >
	|	< REPEATTIMES: "repeatTimes" >
	|	< PER : "per" >
	
	/* Conditions */
	|	< ISFACING : "isfacing" >
	| 	< ISVALID: "isValid" >
	| 	< CANMOVE: "canMove" >
	| 	< NOT: "not" >
	
	/* Cardinal directions */
	| 	< NORTH: "north" >
	| 	< SOUTH: "south" >
	| 	< EAST: "east" >
	| 	< WEST: "west" >s
	
	/* Directions */
	|	< AROUND: "around" >  // For veer command
	| 	< RIGHT: "right" >
	| 	< LEFT: "left" >
	| 	< FRONT: "front" >
	| 	< BACK: "back" >
}


//TOKEN:
//{
//		<BALLOONS:  "BALLOONS" >
//		|	<CHIPS:     "CHIPS"  >	
//
//}


/* Special tokens */
TOKEN :
{
		< NUM: (<DIGIT>)+ >
	|  	< #DIGIT: ["0"-"9"] >
}


	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	{
		(
		  ( // TODO: Funciona con números. Falta con vars y params
 			< NAME > ":=" < NUM > //TODO: Lógica asignación {;salida = "Command: Variable assignment";}
		| 	< STEP >  "(" n=num() ")" {world.moveForward(n, false);salida = "Command: Move steps forward ";}  
		| 	< JUMP >  "(" n=num() ")" {world.moveForward(n, true);salida = "Command: Jump steps forward ";}
		| 	< JUMPTO >  "(" n=num() "," m=num()")" {world.setPostion(n,m);salida = "Command: Jump to position ";}
		| 	< VEER >  "(" D=veerDir() ")" {turn90(D);salida = "Command: Veer 90 degrees in some direction ";}
		| 	< LOOK >  "(" O=cardinalDir() ")" {faceCardinalDir(O);salida = "Command: Look towards some cardinal direction ";}
		| 	< DROP >  "(" n=num() ")" {world.putChips(n);salida = "Command: Drop chips from its position ";}
		| 	< GRAB >  "(" n=num() ")" {world.grabBalloons(n);salida = "Command: Grab balloons from its position ";}
		| 	< GET >  "(" n=num() ")" {world.pickChips(n);salida = "Command: Get chips from its position ";}
		| 	< FREE >  "(" n=num() ")" {world.putBalloons(n);salida = "Command: Put balloons from its position ";}
		| 	< POP >  "(" n=num() ")" {world.popBalloons(n);salida = "Command: Pop balloons from its position ";}
		| 	< DMOVE >  "(" n=num() "," D=dir()")" {dMove(n, D);salida = "Command: Move positions, face original direction ";}
		| 	< OMOVE >  "(" n=num() "," O=cardinalDir()")" {oMove(n, O);salida = "Command: Face cardinal direction then move steps ";}
		
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" // TODO. Ahí el ; no está separando comandos, está yendo al final de todo comando. 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}


	void veerDir():
	{
	}
	{
	  (	< AROUND > )
	  |		(< RIGHT >)
	  | 	(< LEFT >)
	}


	void dir():
	{
	}
	{
	  (	< RIGHT > )
	  |		(< LEFT >)
	  | 	(< FRONT >)
	  | 	(< BACK >)
	}


	void  cardinalDir():
	{
	}
	{
	  (	< NORTH > )
	  |		(< SOUTH >)
	  | 	(< WEST >)
	  | 	(< EAST >)
	}


JAVACODE
	private void turn90(String D) {
		if (D == "left") {
		  	// Turning left is turning right thrice
			world.turnRight()
			world.turnRight()
			world.turnRight()
		} else if (D == "right") {
	    	world.turnRight()
		} else if (D == "around") {
		    world.turnRight()
			world.turnRight()
	    }
	}


JAVACODE
	private void faceCardinalDir(String O) {
		if (O == "north") {
			// TODO: Lógica en Java con las funciones de world que quede mirando al norte
		} else if (O == "south") {
			// TODO
		} else if (O == "east") {
			// TODO
		} else if (O == "west") {
			// TODO
		}
	}


JAVACODE
	private void dMove(n, D) {
		// TODO: Lógica del DMOVE
	}


JAVACODE
	private void oMove(n, O) {
		// TODO: Lógica del OMOVE
	}


		
	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	void step():
	{
		int n = 1;
	}
	{
		(< STEP > "(" n = num() ")" { world.moveForward(n, false); salida= "Command: Step"; })
	}

	void jump():
	{
		int n = 1;
	}
	{
	  < JUMP >"(" n= num()")" { world.moveForward(n,true); salida = "Command: Jump"; }
	}
	
	void free():
	{
		int n = 1;
	}
	{
		< FREE >"("n=num()")" { world.putBalloons(n); salida = "Command: Free"; }
	}

	void pop():
	{
		int n = 1;
	}
	{
		< POP > "("n=num()")" { world.popBalloons(n); salida= "Command: Pop"; }
	}

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

