/*
Project 1
@authors: Federico Melo Barrero, f.melo, 202021525
		  Germán Alberto Rojas Cetina, g.rojasc, 202013415
*/


options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
}


PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{
	private RobotWorldDec world;


	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}


	String salida = new String();
}

PARSER_END(Robot)


SKIP:
{
		" "
	|	"\r"
	|	"\t"
	|	"\n"
}


/* Commands */
TOKEN: 
{
		< STEP: "step" >
	|	< JUMP: "jump" >
	|	< JUMPTO: "jumpTo" >
	|	< VEER: "veer" >
	|	< LOOK: "look" >
	|	< DROP: "drop" >
	|	< GRAB: "grab" >
	|	< GET: "get" >
	|	< FREE: "free" >
	|	< POP: "pop" >
	| 	< DMOVE:  "Dmove" >
	|	< OMOVE:  "Omove" >
}


/* Control structures */
TOKEN :
{
		< IF: "if" >
	|	< FI: "fi" >
	|	< ELSE: "else" >
	| 	< WHILE: "while" >
	|	< DO: "do" >
	| 	< OD: "od" >
	|	< REPEATTIMES: "repeatTimes" >
	|	< PER : "per" >
}


/* Conditions */
TOKEN :
{
		< ISFACING : "isfacing" >
	| 	< ISVALID: "isValid" >
	| 	< CANMOVE: "canMove" >
	| 	< NOT: "not" >
	|	< PICK:  "pick" > // For isValid condition
}


/* Cardinal directions */
TOKEN :
{
	 	< NORTH: "north" >
	| 	< SOUTH: "south" >
	| 	< EAST: "east" >
	| 	< WEST: "west" >
}


/* Directions */
TOKEN :
{
		< AROUND: "around" >
	| 	< RIGHT: "right" >
	| 	< LEFT: "left" >
	| 	< FRONT: "front" >
	| 	< BACK: "back" >
}


/* Keywords */
TOKEN :
{
		< PROG: "PROG" >
	|	< GORP: "GORP" >
	|	< VAR: "VAR" >
	|	< PROC: "PROC" >
	|	< CORP: "CORP" >
}


/* Name */
TOKEN :
{
		< NAME: <LETTER>(["a"-"z","A"-"Z","0"-"9"])* >
	|  	< #LETTER: ["a"-"z","A"-"Z"] >
}

/* Number */
TOKEN :
{
		< NUM: (<DIGIT>)+ >
	|  	< #DIGIT: ["0"-"9"] >
}


	boolean program(Console sistema):
	{
		salida = new String();
	}
	{
		< PROG > [varDecl()] (procDef())* instrBlock() < GORP > {
		    try {
	    		Thread.sleep(900);
	    	} catch (InterruptedException e) {
	    		System.err.format("IOException: %s%n", e);
	    	}
			sistema.printOutput(salida);
			return true;
		}
    	| <EOF> {return false;}
	}


	void varDecl():
	{
	}
	{
		< VAR > < NAME > ("," < NAME >)* ";" {
			/*TODO : Lógica Java declaración de variables*/
			salida="Variable declaration";
			}
	}


	void procDef():
	{
	}
	{
		< PROC > < NAME > "(" [params()] ")" instrBlock() < CORP > {
			/*TODO : Lógica Java definición de procedimientos*/
			salida="Procedure definition";
			}
	}


	void params():
	{
	}
	{
		< NAME > ("," < NAME >)*
	}


	void instrBlock():
	{
	}
	{
		"{" instr() (";" instr())* "}"
	}


	void instr():
	{
	}
	{
		command()
	|	ctrlStruct()
	|	procCall()
	}


	void command():
	{	
		int n, m;
	}
	{  // TODO: Funciona con números. Falta con vars y params
		< NAME > ":=" < NUM > {/*TODO: Lógica asignación*/salida = "Command: Variable assignment";}
	|	< STEP >  "(" n=num() ")" {world.moveForward(n, false); salida = "Command: Move steps forward ";}  
	|	< JUMP >  "(" n=num() ")" {world.moveForward(n, true); salida = "Command: Jump steps forward ";}
	|	< JUMPTO >  "(" n=num() "," m=num()")" {world.setPostion(n,m); salida = "Command: Jump to position ";}
	|	< VEER >  "(" veer() ")"
	|	< LOOK >  "(" look() ")"
	|	< DROP >  "(" n=num() ")" {world.putChips(n); salida = "Command: Drop chips from its position ";}
	|	< GRAB >  "(" n=num() ")" {world.grabBalloons(n); salida = "Command: Grab balloons from its position ";}
	|	< GET >  "(" n=num() ")" {world.pickChips(n); salida = "Command: Get chips from its position ";}
	|	< FREE >  "(" n=num() ")" {world.putBalloons(n); salida = "Command: Put balloons from its position ";}
	|	< POP >  "(" n=num() ")" {world.popBalloons(n); salida = "Command: Pop balloons from its position ";}
	|	< DMOVE >  "(" dMove() ")"
	|	< OMOVE >  "(" oMove() ")"
	}


	void ctrlStruct():
	{
		boolean bool = false;
	}
	{
		ifElseFi()
	|	ifFi()
	|	whileDoOd()
	|	repeatTimes()
	}


	void ifElseFi():
	{
	}
	{
		< IF > "(" bool=condition() ")" instrBlock() < ELSE > instrBlock() < FI >  {
			/*TODO : Lógica Java if else*/
			salida="'if-else' conditional control structure";
			}
	}


	void ifFi():
	{
	}
	{
		< IF > "(" bool=condition() ")" instrBlock() < FI >  {
			/*TODO : Lógica Java if */
			salida="'if' conditional control structure";
			}
	}


	void whileDoOd():
	{
	}
	{
		< WHILE > "(" bool=condition() ")" < DO > instrBlock() < OD > {
			/*TODO : Lógica Java while */
			salida="'while' loop control structure";
			}
	}


	void repeatTimes():
	{
		int n;
	}
	{
		< REPEATTIMES > n=num() instrBlock() < PER > {
			/*TODO : Lógica repeatTimes */
			salida="'repeatTimes' loop control structure";
			}
	}


	void condition():
	{
	}
	{
		< ISFACING >  "(" bool=isFacing() ")"
	|	< ISVALID >  "(" bool=isValid() ")"
	|	< CANMOVE >  "(" bool=canMove() ")"
	|	< NOT >  "(" bool=not() ")"
	}


	void procCall():
	{
	}
	{
		// TODO
	}


	void veer() :
	{
	}
	{
		(< RIGHT > {world.turnRight(); salida = "Command: Veer right ";})
	|	(< AROUND > {world.turnRight(); world.turnRight(); salida = "Command: Veer around ";})
	|	(< LEFT > {world.turnRight(); world.turnRight(); world.turnRight(); salida = "Command: Veer left ";})
	}


	void look() :
	{
	}
	{
		(< NORTH > {
			if (world.facingWest()) {
				world.turnRight();
			} else if (world.facingSouth()) {
				world.turnRight(); world.turnRight();
			} else if (world.facingEast()) {
				world.turnRight(); world.turnRight(); world.turnRight();
			}
			salida = "Command: Look north ";})
	|	(< SOUTH > {
			if (world.facingEast()) {
				world.turnRight();
			} else if (world.facingNorth()) {
				world.turnRight(); world.turnRight();
			} else if (world.facingWest()) {
				world.turnRight(); world.turnRight(); world.turnRight();
			}
			salida = "Command: Look south ";})
	|	(< EAST > {
			if (world.facingNorth()) {
				world.turnRight();
			} else if (world.facingWest()) {
				world.turnRight(); world.turnRight();
			} else if (world.facingSouth()) {
				world.turnRight(); world.turnRight(); world.turnRight();
			}
			salida = "Command: Look east ";})
	|	(< WEST > {
			if (world.facingSouth()) {
				world.turnRight();
			} else if (world.facingEast()) {
				world.turnRight(); world.turnRight();
			} else if (world.facingNorth()) {
				world.turnRight(); world.turnRight(); world.turnRight();
			}
			salida = "Command: Look west ";})
	}


	void dMove() :
	{
		int n;
	}
	{
		( n = num() "," < FRONT > {
			world.moveForward(n, false)
			salida = "Command: Move to the front, face original direction ";})
	|	( n = num() "," < RIGHT > {
			world.turnRight();
			world.moveForward(n, false)
			world.turnRight(); world.turnRight(); world.turnRight();
			salida = "Command: Move to the right, face original direction ";})
	|	( n = num() "," < BACK > {
			world.turnRight(); world.turnRight();
			world.moveForward(n, false)
			world.turnRight(); world.turnRight();
			salida = "Command: Move to the back, face original direction ";})
	|	( n = num() "," < LEFT > {
			world.turnRight(); world.turnRight(); world.turnRight();
			world.moveForward(n, false)
			world.turnRight();
			salida = "Command: Move to the left, face original direction ";})
	}


	void oMove() :
	{
		int n;
	}
	{
		( num() "," < NORTH > {
			if (world.facingWest()) {
				world.turnRight();
			} else if (world.facingSouth()) {
				world.turnRight(); world.turnRight();
			} else if (world.facingEast()) {
				world.turnRight(); world.turnRight(); world.turnRight();
			}
			world.moveForward(n, false)
			salida = "Command: Face north, move steps";})
	|	(num() "," < SOUTH > {
			if (world.facingEast()) {
				world.turnRight();
			} else if (world.facingNorth()) {
				world.turnRight(); world.turnRight();
			} else if (world.facingWest()) {
				world.turnRight(); world.turnRight(); world.turnRight();
			}
			world.moveForward(n, false)
			salida = "Command: Face south, move steps";})
	|	(num() "," < EAST > {
			if (world.facingNorth()) {
				world.turnRight();
			} else if (world.facingWest()) {
				world.turnRight(); world.turnRight();
			} else if (world.facingSouth()) {
				world.turnRight(); world.turnRight(); world.turnRight();
			}
			world.moveForward(n, false)
			salida = "Command: Face east, move steps";})
	|	(num() "," < WEST > {
			if (world.facingSouth()) {
				world.turnRight();
			} else if (world.facingEast()) {
				world.turnRight(); world.turnRight();
			} else if (world.facingNorth()) {
				world.turnRight(); world.turnRight(); world.turnRight();
			}
			world.moveForward(n, false)
			salida = "Command: Face west, move steps";})
	}


	void isFacing():
	{
	}
	{
		(< NORTH > {
			bool=world.facingNorth()})
	|	(< SOUTH > {
			bool=world.facingSouth()})
	|	(< EAST > {
			bool=world.facingEast()})
	|	(< WEST > {
			bool=world.facingWest()})
	}


	void isValid():
	{
		int n;
	}
	{ // TODO: Que n pueda ser num, var, param
		(< STEP > ","  n=num() {/*TODO: Lógica*/})
	|	(< JUMP > ","  n=num() {/*TODO: Lógica*/})
	|	(< GRAB > ","  n=num() {/*TODO: Lógica*/})
	|	(< POP > ","  n=num() {/*TODO: Lógica*/})
	|	(< PICK > ","  n=num() {/*TODO: Lógica.})  /* Equivalent to 'grab' */
	|	(< FREE > ","  n=num() {/*TODO: Lógica*/})
	|	(< DROP > ","  n=num() {/*TODO: Lógica*/})
	}


	void canMove():
	{
		int n;
	}
	{  // TODO: Que n pueda ser num, var, param
		(< NORTH > ","  n=num() {/*TODO: Lógica*/})
	|	(< SOUTH > ","  n=num() {/*TODO: Lógica*/})
	|	(< EAST > ","  n=num() {/*TODO: Lógica*/})
	|	(< WEST > ","  n=num() {/*TODO: Lógica*/})
	}


	void not():
	{
	}
	{
		condition() {/*TODO: Lógica*/}
	}


	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

